# Smart Door Lock System

This smart door lock system is built on the ESP32 microcontroller, integrating an RFID reader, keypad verification, and WiFi remote control to provide users with multiple convenient access methods.

## 1. RFID Reader Module

The RFID (Radio-Frequency Identification) module uses the MFRC522 chip to implement contactless access control:

- **Hardware Connection**: SS_PIN connected to ESP32's GPIO5, RST_PIN connected to GPIO22
- **Verification Mechanism**: The system stores a preset authorized card UID (82 46 B8 02) and automatically compares it with the scanned card

### Key Implementation:

```cpp
// RFID module initialization
#define SS_PIN  5    // ESP32's SDA(SS) connected to GPIO5
#define RST_PIN 22   // ESP32's RST connected to GPIO22
MFRC522 rfid(SS_PIN, RST_PIN);  // Create MFRC522 instance

// Authorized RFID card UID (82 46 B8 02)
byte authorizedUID[4] = {0x82, 0x46, 0xB8, 0x02};
```

The RFID checking logic:

```cpp
void checkRFID() {
  // Look for new cards
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) {
    return;
  }
  
  // Display card UID
  String cardUID = "";
  Serial.print("Card UID detected:");
  for (byte i = 0; i < rfid.uid.size; i++) {
    // Build UID string for log
    cardUID += String(rfid.uid.uidByte[i] < 0x10 ? "0" : "");
    cardUID += String(rfid.uid.uidByte[i], HEX);
    if (i < rfid.uid.size - 1) cardUID += " ";
  }
  
  // Check if it's an authorized card
  if (compareUID(rfid.uid.uidByte, authorizedUID, rfid.uid.size)) {
    Serial.println("Authorized card recognized!");
    addLogEntry("Access granted: Card " + cardUID);
    openDoor();
  } else {
    Serial.println("Unauthorized card");
    addLogEntry("Access denied: Card " + cardUID);
    errorBlink();
  }
}
```

This module communicates with the ESP32 via SPI interface, providing a fast and convenient access verification method suitable for frequently accessed scenarios.

## 2. Keypad Verification Module

The 4x4 matrix keypad module provides users with a password verification alternative:

- **Button Layout**: Standard 4x4 keypad with numbers 0-9 and function keys A, B, C, D, *, #
- **Interface Connection**: Row pins connected to ESP32's GPIO 32, 33, 25, 26; column pins to GPIO 27, 14, 12, 13
- **Password Setting**: System preset password is "0530" with a length of 4 digits

### Key Implementation:

```cpp
// Define keypad rows and columns
const byte ROWS = 4;
const byte COLS = 4;

// Define keypad button symbols
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// Keypad pin definitions
byte rowPins[ROWS] = {32, 33, 25, 26}; // Modify according to your actual connections
byte colPins[COLS] = {27, 14, 12, 13}; // Modify according to your actual connections

// Set password
const char* PASSWORD = "0530";
const byte PASSWORD_LENGTH = 4;
```

The password verification logic:

```cpp
void verifyPassword() {
  Serial.println("\nVerifying password...");
  
  // Compare entered password with stored password
  bool passwordCorrect = true;
  
  // Check if length is the same
  if (currentPosition != PASSWORD_LENGTH) {
    passwordCorrect = false;
  } else {
    // Compare character by character
    for (byte i = 0; i < PASSWORD_LENGTH; i++) {
      if (enteredKeys[i] != PASSWORD[i]) {
        passwordCorrect = false;
        break;
      }
    }
  }
  
  // Execute actions based on verification result
  if (passwordCorrect) {
    Serial.println("Correct password! Door opened!");
    addLogEntry("Access granted: Keypad PIN");
    openDoor();
  } else {
    Serial.println("Incorrect password! Please try again.");
    addLogEntry("Access denied: Wrong PIN");
    errorBlink();
  }
}
```

This module provides access assurance for users without cards or as a backup entry method, while logging all verification attempts to enhance security.

## 3. WiFi and Mobile Device Control Module

The system integrates the ESP32's WiFi functionality, creating an independent access point and providing a web interface with API endpoints:

- **Network Configuration**:
  - SSID: SmartDoorLock
  - Password: doorlock123
  - Web server: Running on port 80
  
### Key Implementation:

```cpp
// WiFi credentials
const char* ssid = "SmartDoorLock";      // Your WiFi AP name
const char* password = "doorlock123";    // WiFi password

// Create web server
WebServer server(80);

// Start WiFi Access Point
WiFi.softAP(ssid, password);
  
// Define web server endpoints
server.on("/", handleRoot);
server.on("/open", HTTP_GET, handleOpen);
server.on("/close", HTTP_GET, handleClose);
server.on("/status", HTTP_GET, handleStatus);
server.on("/log", HTTP_GET, handleLog);
  
// Special endpoints optimized for Shortcuts
server.on("/api/open", HTTP_GET, handleApiOpen);
server.on("/api/close", HTTP_GET, handleApiClose);
server.on("/api/status", HTTP_GET, handleApiStatus);
```

iPhone Shortcuts API integration:

```cpp
// API handlers for iPhone Shortcuts
void handleApiOpen() {
  openDoor();
  addLogEntry("Door opened via iPhone Shortcut");
  String jsonResponse = "{\"status\":\"success\",\"message\":\"Door opened\",\"door\":\"open\"}";
  server.send(200, "application/json", jsonResponse);
}

void handleApiClose() {
  closeDoor();
  addLogEntry("Door closed via iPhone Shortcut");
  String jsonResponse = "{\"status\":\"success\",\"message\":\"Door closed\",\"door\":\"closed\"}";
  server.send(200, "application/json", jsonResponse);
}

void handleApiStatus() {
  String doorState = doorIsOpen ? "open" : "closed";
  String jsonResponse = "{\"status\":\"success\",\"door\":\"" + doorState + "\"}";
  server.send(200, "application/json", jsonResponse);
}
```

This module allows users to control the door lock remotely via a smartphone or any browser-enabled device, greatly enhancing the system's convenience and flexibility.

## Core Door Control Logic

The fundamental door control functions that are used by all modules:

```cpp
// Open door
void openDoor() {
  if (!doorIsOpen) {
    Serial.println("Opening door...");
    doorLock.write(90); // Rotate servo to 90 degrees
    successBlink();
    doorIsOpen = true;
    doorOpenTime = millis(); // Record door open time
  }
}

// Close door
void closeDoor() {
  if (doorIsOpen) {
    Serial.println("Closing door...");
    doorLock.write(0); // Rotate servo back to 0 degrees
    doorIsOpen = false;
    addLogEntry("Door closed");
  }
}

// Automatic door closing in the main loop
void loop() {
  // Handle web server client requests
  server.handleClient();
  
  // Check if door needs to be automatically closed
  if (doorIsOpen && (millis() - doorOpenTime > DOOR_OPEN_DURATION)) {
    closeDoor();
  }
  
  // Check RFID card
  checkRFID();
  
  // Check keypad input
  checkKeypad();
}
  